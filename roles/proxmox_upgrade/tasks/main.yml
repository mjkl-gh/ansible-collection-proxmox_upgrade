---
- name: Make sure only one node is upgraded at a time
  ansible.builtin.assert:
    that:
      - ansible_play_batch == [inventory_hostname]
    msg: "Only one node can be upgraded at a time"
  run_once: true

- name: List existing nodes
  community.proxmox..proxmox_node_info:
    api_host: "{{ proxmox_upgrade_api_hostname }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password | default(omit) }}"
    validate_certs: "{{ proxmox_api_validate_certs | default(true) }}"
  register: proxmox_nodes
  run_once: true

- name: Fetch all VM information
  community.proxmox..proxmox_vm_info:
    api_host: "{{ proxmox_upgrade_api_hostname }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password | default(omit) }}"
    validate_certs: "{{ proxmox_api_validate_certs | default(true) }}"
    type: qemu
  register: vm_info

- name: Create migration plan
  ansible.builtin.set_fact:
    vm_migration_plan: "{{ vm_info['proxmox_vms'] | adfinis.proxmox_upgrade.migration_plan(proxmox_nodes['proxmox_nodes'], proxmox_upgrade_node_name) }}"
  delegate_to: localhost

- name: Show migration plan
  ansible.builtin.debug:
    var: vm_migration_plan
  run_once: true
  delegate_to: localhost

- name: Confirm VM migration
  ansible.builtin.pause:
    prompt: |
      The following VMs will be migrated from {{ proxmox_upgrade_node_name }}:
      {% for vm_name, target_node in vm_migration_plan.items() %}
      - {{ vm_name }} -> {{ target_node }}
      {% endfor %}

      Do you want to proceed with the migration? (yes/no)
  register: migration_confirmation
  run_once: true
  when:
    - vm_migration_plan | length > 0
    - proxmox_upgrade_confirm_migration | bool

- name: Validate migration confirmation
  ansible.builtin.assert:
    that:
      - migration_confirmation.user_input | lower in ['yes', 'y']
    fail_msg: "Migration cancelled by user"
    success_msg: "Migration confirmed, proceeding..."
  run_once: true
  when:
    - vm_migration_plan | length > 0
    - proxmox_upgrade_confirm_migration | bool

- name: Migrate VMs to new node
  community.proxmox..proxmox_kvm:
    api_host: "{{ proxmox_upgrade_api_hostname }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password | default(omit) }}"
    validate_certs: "{{ proxmox_api_validate_certs | default(true) }}"
    name: "{{ item.key }}"
    node: "{{ item.value }}"
    migrate: true
    migrate_downtime: "{{ proxmox_upgrade_migration_downtime }}"
    timeout: "{{ proxmox_upgrade_migration_timeout }}"
  loop: "{{ vm_migration_plan | dict2items }}"
  run_once: true
  when: >
    vm_migration_plan | length > 0 and
    (not proxmox_upgrade_confirm_migration | bool or
     (migration_confirmation is defined and migration_confirmation.user_input | lower in ['yes', 'y']))

- name: Enable maintenance mode on node
  ansible.builtin.command:
    cmd: "ha-manager crm-command node-maintenance enable {{ proxmox_upgrade_node_name }}"
  changed_when: true

- name: Upgrade node
  ansible.builtin.apt:
    update_cache: true
    upgrade: "{{ proxmox_upgrade_mode }}"
    autoremove: "{{ proxmox_upgrade_autoremove }}"

- name: Reboot node
  ansible.builtin.reboot:
    reboot_timeout: "{{ proxmox_upgrade_reboot_timeout }}"
    msg: "Rebooting node to apply upgrades"
    search_paths: ['/lib/molly-guard', '/sbin']

- name: Wait for node to come back online
  community.proxmox..proxmox_node_info:
    api_host: "{{ proxmox_upgrade_api_hostname }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password | default(omit) }}"
    validate_certs: "{{ proxmox_api_validate_certs | default(true) }}"
  register: node_info
  vars:
    node_status_query: "proxmox_nodes[?node == '{{ proxmox_upgrade_node_name }}'].status | [0]"
  until: node_info | community.proxmox..json_query(node_status_query) == 'online'
  retries: 100
  delay: 10

- name: Disable maintenance mode on node
  ansible.builtin.command:
    cmd: "ha-manager crm-command node-maintenance disable {{ proxmox_upgrade_node_name }}"
  changed_when: true
